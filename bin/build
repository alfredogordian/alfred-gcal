#!/usr/bin/env zsh

# Path to this script's directory (i.e. workflow root)
here="$( cd "$( dirname "$0" )"; pwd )"
root="$( cd "$here/../"; pwd )"
builddir="${root}/build"

source "${root}/alfred_env.sh"

verbose=
devmode=true
runtests=false
force=false

# log <arg>... | Echo args to STDERR
log() {
  echo "$@" >&2
}

# cleanup | Delete temporary build files
cleanup() {
  log "Cleaning up ..."
  test -d "$builddir" && rm -rf $verbose "${builddir}/"*
}

# usage | Show usage message
usage() {
  cat <<EOS
build [-h] [-d] [-t] [-v]

Build workflow from source code in ./build directory.
Use -d to also build an .alfredworkflow file.

Usage:
  build [-d] [-t] [-f] [-v]
  build -h

Options:
  -d  Distribution. Also build .alfredworkflow file.
  -f  Force. Overwrite existing files.
  -t  Also run unit tests.
  -h  Show this message and exit.
  -v  Verbose.
EOS
}

# -------------------------------------------------------
# CLI options
while getopts ":dfhtv" opt; do
  case $opt in
    d)
      devmode=false
      ;;
    f)
      force=true
      ;;
    h)
      usage
      exit 0
      ;;
    t)
      runtests=true
      ;;
    v)
      verbose=-v
      ;;
    \?)
      log "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

test -z "$root" && { log "Couldn't find workflow directory"; exit 1 }


pushd "$root" &> /dev/null
# -------------------------------------------------------
# Run unit tests
$runtests && {
  log "Running unit tests ..."
  go test $verbose . || exit 1
}

# -------------------------------------------------------
# Build
test -d "${builddir}" && { log "Cleaning build directory ..."; cleanup }

log "Building executable(s) ..."
go build $verbose -o ./gcal .
zipname="Google-Calendar-Events-${alfred_workflow_version}.alfredworkflow"
outpath="${root}/${zipname}"
# $devmode && { sym="-s" }

log "Linking assets to build directory ..."
# mkdir -vp "$builddir"
# mkdir -p $verbose "${builddir}/scripts/"{tab,url}
mkdir -p $verbose "${builddir}/icons"

pushd "$builddir" &> /dev/null

ln $verbose ../*.png .
ln $verbose ../*.html .
ln $verbose ../info.plist .
ln $verbose ../gcal .
ln $verbose ../README.md .
ln $verbose ../LICENCE.txt .
ln $verbose ../icons/*.png ./icons/
# ln $verbose scripts/tab/* "${builddir}/scripts/tab/"
# ln $verbose scripts/url/* "${builddir}/scripts/url/"
popd &> /dev/null

# -------------------------------------------------------
# Build .alfredworkflow file
$devmode || {
  test -f "${outpath}" && {
    $force && {
      rm $verbose "${outpath}"
    } || {
      log "Destination file already exists. Use -f to overwrite."
      exit 1
    }
  }
  log "Building .alfredworkflow file ..."
  pushd "$builddir" &> /dev/null
  zip -9 -r "${outpath}" ./*
  ST_ZIP=$?
  test "$ST_ZIP" -ne 0 && {
    log "Error creating .alfredworkflow file."
    popd &> /dev/null
    popd &> /dev/null
    exit $ST_ZIP
  }
  popd &> /dev/null
  log "Wrote '${zipname}' file in '$( pwd )'"
}

popd &> /dev/null
